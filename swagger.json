{
  "swagger": "2.0",
  "info": {
    "title": "ACME EXPLORER API",
    "version": "1.0.0"
  },
  "host": "localhost:8080",
  "basePath": "/",
  "paths": {
    "/actors": {
      "parameters": [
        {
          "name": "X-API-Version",
          "in": "header",
          "required": true,
          "type": "string",
          "default": "v1",
          "enum": [
            "v1",
            "v2"
          ]
        }
      ],
      "post": {
        "summary": "Register an actor",
        "description": "This method is used to create an actor, it returns the created actor. Managers can only be created by administrators. Explorers can be created by any user.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Actor"
        ],
        "parameters": [
          {
            "name": "actor",
            "in": "body",
            "description": "Actor to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RegisterActor"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Actor"
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/actors/{actorId}": {
      "parameters": [
        {
          "name": "X-API-Version",
          "in": "header",
          "required": true,
          "type": "string",
          "default": "v1",
          "enum": [
            "v1",
            "v2"
          ]
        }
      ],
      "put": {
        "summary": "Update an actor",
        "description": "This method is used to update an actor, it returns the updated actor. You can only update your own actor.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Actor"
        ],
        "parameters": [
          {
            "name": "actorId",
            "in": "path",
            "description": "Actor id",
            "required": true,
            "type": "string"
          },
          {
            "name": "actor",
            "in": "body",
            "description": "Actor to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateActor"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Actor"
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Actor not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/actors/{actorId}/ban": {
      "parameters": [
        {
          "name": "X-API-Version",
          "in": "header",
          "required": true,
          "type": "string",
          "default": "v1",
          "enum": [
            "v1",
            "v2"
          ]
        }
      ],
      "patch": {
        "summary": "Ban an actor",
        "description": "This method is used to ban an actor, it returns the updated actor. This method is only available for administrators.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Actor"
        ],
        "parameters": [
          {
            "name": "actorId",
            "in": "path",
            "description": "Actor id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Actor"
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Actor not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/actors/{actorId}/unban": {
      "parameters": [
        {
          "name": "X-API-Version",
          "in": "header",
          "required": true,
          "type": "string",
          "default": "v1",
          "enum": [
            "v1",
            "v2"
          ]
        }
      ],
      "patch": {
        "summary": "Unban an actor",
        "description": "This method is used to unban an actor, it returns the updated actor. This method is only available for administrators.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Actor"
        ],
        "parameters": [
          {
            "name": "actorId",
            "in": "path",
            "description": "Actor id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Actor"
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Actor not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/trips": {
      "parameters": [
        {
          "name": "X-API-Version",
          "in": "header",
          "required": true,
          "type": "string",
          "default": "v1",
          "enum": [
            "v1",
            "v2"
          ]
        }
      ],
      "get": {
        "summary": "Get all trips",
        "description": "This method is used to get all trips. This method is available for all users.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Trip"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Trip"
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "Create a trip",
        "description": "This method is used to create a trip, it returns the created trip. This method is only available for managers.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Trip"
        ],
        "parameters": [
          {
            "name": "trip",
            "in": "body",
            "description": "Trip to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateTrip"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Trip"
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/trips/search": {
      "parameters": [
        {
          "name": "X-API-Version",
          "in": "header",
          "required": true,
          "type": "string",
          "default": "v1",
          "enum": [
            "v1",
            "v2"
          ]
        }
      ],
      "get": {
        "summary": "Get  trips",
        "description": "This method is used to get trips. This method is available for all users.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Trip"
        ],
        "parameters": [
          {
            "name": "keyword",
            "in": "query",
            "description": "Keyword to search into ticker, title and description",
            "required": false,
            "type": "string"
          },
          {
            "name": "minPrice",
            "in": "query",
            "description": "Minimum price",
            "required": false,
            "type": "number"
          },
          {
            "name": "maxPrice",
            "in": "query",
            "description": "Maximum price",
            "required": false,
            "type": "number"
          },
          {
            "name": "minDate",
            "in": "query",
            "description": "Minimium start date",
            "required": false,
            "type": "string",
            "format": "date"
          },
          {
            "name": "maxDate",
            "in": "query",
            "description": "Maximum start date",
            "required": false,
            "type": "string",
            "format": "date"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Trip"
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/trips/{tripId}": {
      "parameters": [
        {
          "name": "X-API-Version",
          "in": "header",
          "required": true,
          "type": "string",
          "default": "v1",
          "enum": [
            "v1",
            "v2"
          ]
        }
      ],
      "put": {
        "summary": "Update a trip",
        "description": "This method is used to update a trip, it returns the updated trip.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Trip"
        ],
        "parameters": [
          {
            "name": "tripId",
            "in": "path",
            "description": "Trip id",
            "required": true,
            "type": "string"
          },
          {
            "name": "trip",
            "in": "body",
            "description": "Trip to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateTrip"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/UpdateActor"
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Trip not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "summary": "Delete a trip",
        "description": "This method is used to delete a trip.",
        "tags": [
          "Trip"
        ],
        "parameters": [
          {
            "name": "tripId",
            "in": "path",
            "description": "Trip id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Trip not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/trips/{tripId}/publish": {
      "parameters": [
        {
          "name": "X-API-Version",
          "in": "header",
          "required": true,
          "type": "string",
          "default": "v1",
          "enum": [
            "v1",
            "v2"
          ]
        }
      ],
      "patch": {
        "summary": "Publish a trip",
        "description": "This method is used to publish a trip.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Trip"
        ],
        "parameters": [
          {
            "name": "tripId",
            "in": "path",
            "description": "Trip id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Trip"
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Trip not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/trips/{tripId}/cancel": {
      "parameters": [
        {
          "name": "X-API-Version",
          "in": "header",
          "required": true,
          "type": "string",
          "default": "v1",
          "enum": [
            "v1",
            "v2"
          ]
        }
      ],
      "patch": {
        "summary": "Cancel a trip",
        "description": "This method is used to cancel a trip.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Trip"
        ],
        "parameters": [
          {
            "name": "tripId",
            "in": "path",
            "description": "Trip id",
            "required": true,
            "type": "string"
          },
          {
            "name": "cancelReason",
            "in": "body",
            "description": "The cancel reason.",
            "schema": {
              "type": "object",
              "required": [
                "cancelReason"
              ],
              "properties": {
                "cancelReason": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Trip"
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Trip not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/bookings": {
      "parameters": [
        {
          "name": "X-API-Version",
          "in": "header",
          "required": true,
          "type": "string",
          "default": "v1",
          "enum": [
            "v1",
            "v2"
          ]
        }
      ],
      "get": {
        "summary": "Get bookings",
        "description": "This method is used to get a list of bookings. If user is an explorer, it will return all the applications he made. If user is a manager, it will return all the applications for the trips he manages.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Booking"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Booking"
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "Create a booking",
        "description": "This method is used to create a booking.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Booking"
        ],
        "parameters": [
          {
            "name": "booking",
            "in": "body",
            "description": "The booking to create.",
            "schema": {
              "$ref": "#/definitions/CreateBooking"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Booking"
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/bookings/{id}/due": {
      "parameters": [
        {
          "name": "X-API-Version",
          "in": "header",
          "required": true,
          "type": "string",
          "default": "v1",
          "enum": [
            "v1",
            "v2"
          ]
        }
      ],
      "patch": {
        "summary": "Set a booking as due",
        "description": "This method is used to set a booking as due.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Booking"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Booking id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Booking"
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Booking not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/bookings/{id}/reject": {
      "parameters": [
        {
          "name": "X-API-Version",
          "in": "header",
          "required": true,
          "type": "string",
          "default": "v1",
          "enum": [
            "v1",
            "v2"
          ]
        }
      ],
      "patch": {
        "summary": "Reject a booking",
        "description": "This method is used to reject a booking.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Booking"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Booking id",
            "required": true,
            "type": "string"
          },
          {
            "name": "rejectReason",
            "in": "body",
            "description": "The reject reason.",
            "schema": {
              "type": "object",
              "required": [
                "rejectReason"
              ],
              "properties": {
                "rejectReason": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Booking"
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Booking not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/bookings/{id}/pay": {
      "parameters": [
        {
          "name": "X-API-Version",
          "in": "header",
          "required": true,
          "type": "string",
          "default": "v1",
          "enum": [
            "v1",
            "v2"
          ]
        }
      ],
      "patch": {
        "summary": "Set a booking as paid",
        "description": "This method is used to set a booking as paid.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Booking"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Booking id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Booking"
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Booking not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/bookings/{id}/cancel": {
      "parameters": [
        {
          "name": "X-API-Version",
          "in": "header",
          "required": true,
          "type": "string",
          "default": "v1",
          "enum": [
            "v1",
            "v2"
          ]
        }
      ],
      "patch": {
        "summary": "Cancel a booking",
        "description": "This method is used to cancel a booking.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Booking"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Booking id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Booking"
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Booking not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/datawarehouse/last": {
      "parameters": [
        {
          "name": "X-API-Version",
          "in": "header",
          "required": true,
          "type": "string",
          "default": "v1",
          "enum": [
            "v1",
            "v2"
          ]
        }
      ],
      "get": {
        "summary": "Get last indicators",
        "description": "This method is used to get the last indicators.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Datawarehouse"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Datawarehouse"
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/sponsorships": {
      "parameters": [
        {
          "name": "X-API-Version",
          "in": "header",
          "required": true,
          "type": "string",
          "default": "v1",
          "enum": [
            "v1",
            "v2"
          ]
        }
      ],
      "get": {
        "summary": "Get all sponsorships",
        "description": "This method is used to get all sponsoships.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Sponsorship"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Sponsorship"
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "Create a sponsorship",
        "description": "This method is used to create a sponsorship, it returns the created sponsorship.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Sponsorship"
        ],
        "parameters": [
          {
            "name": "sponsorship",
            "in": "body",
            "description": "sponsorship to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateSponsorship"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Sponsorship"
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/sponsorships/{sponsorshipId}": {
      "parameters": [
        {
          "name": "X-API-Version",
          "in": "header",
          "required": true,
          "type": "string",
          "default": "v1",
          "enum": [
            "v1",
            "v2"
          ]
        }
      ],
      "put": {
        "summary": "Update a sponsorship",
        "description": "This method is used to update a sponsorship, it returns the updated sponsorship.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Sponsorship"
        ],
        "parameters": [
          {
            "name": "sponsorshipId",
            "in": "path",
            "description": "Sponsorship id",
            "required": true,
            "type": "string"
          },
          {
            "name": "sponsorship",
            "in": "body",
            "description": "Sponsorship to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateSponsorship"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Sponsorship"
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Sponsorship not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "patch": {
        "summary": "Pay a sponsorship",
        "description": "This method is used to pay a sponsorship.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Sponsorship"
        ],
        "parameters": [
          {
            "name": "sponsorshipId",
            "in": "path",
            "description": "Sponsorship id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Sponsorship"
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Trip not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "summary": "Delete a sponsorship",
        "description": "This method is used to delete a sponsorship.",
        "tags": [
          "Sponsorship"
        ],
        "parameters": [
          {
            "name": "sponsorshipId",
            "in": "path",
            "description": "Sponsorship id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Sponsorship not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/configurations": {
      "parameters": [
        {
          "name": "X-API-Version",
          "in": "header",
          "required": true,
          "type": "string",
          "default": "v1",
          "enum": [
            "v1",
            "v2"
          ]
        }
      ],
      "get": {
        "summary": "Get actual configuration",
        "description": "This method is used to get the actual configuration.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Configuration"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Configuration"
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/configurations/{id}": {
      "parameters": [
        {
          "name": "X-API-Version",
          "in": "header",
          "required": true,
          "type": "string",
          "default": "v1",
          "enum": [
            "v1",
            "v2"
          ]
        }
      ],
      "put": {
        "summary": "Update the flat rate",
        "description": "This method is used to update the flat rate, it returns the updated flat rate.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Configuration"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "name": "configuration",
            "in": "body",
            "description": "flat rate to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Configuration"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Configuration"
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Flat rate not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    }
  },
  "definitions": {
    "Actor": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "description": "The id of the actor",
          "example": "1"
        },
        "name": {
          "type": "string",
          "description": "The name of the actor",
          "required": true,
          "example": "John Doe"
        },
        "surname": {
          "type": "string",
          "description": "The surname of the actor",
          "required": true,
          "example": "Doe"
        },
        "email": {
          "type": "string",
          "format": "email",
          "description": "The email of the actor",
          "required": true,
          "example": "jhon@mail.com"
        },
        "password": {
          "type": "string",
          "description": "The password of the actor, it must be at least 5 characters long, and it must be at least 5 characters long and must contain at least one uppercase letter, one lowercase letter, one number and one special character",
          "required": true,
          "example": "Password123%"
        },
        "role": {
          "type": "string",
          "description": "The role of the actor, it must be ADMINISTRATOR, MANAGER or EXPLORER",
          "required": true,
          "example": "EXPLORER"
        },
        "phone": {
          "type": "string",
          "description": "The phone of the actor",
          "example": "123456789"
        },
        "address": {
          "type": "string",
          "description": "The address of the actor",
          "example": "Calle sa 123"
        },
        "banned": {
          "type": "boolean",
          "description": "The banned status of the actor",
          "example": "false"
        }
      }
    },
    "RegisterActor": {
      "type": "object",
      "required": [
        "name",
        "surname",
        "email",
        "password",
        "role"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the actor",
          "example": "John Doe"
        },
        "surname": {
          "type": "string",
          "description": "The surname of the actor",
          "example": "Doe"
        },
        "email": {
          "type": "string",
          "format": "email",
          "description": "The email of the actor",
          "example": "jhon@mail.com"
        },
        "password": {
          "type": "string",
          "description": "The password of the actor, it must be at least 5 characters long, and it must be at least 5 characters long and must contain at least one uppercase letter, one lowercase letter, one number and one special character",
          "example": "Password123%"
        },
        "role": {
          "type": "string",
          "description": "The role of the actor, it must be ADMINISTRATOR, MANAGER or EXPLORER",
          "example": "EXPLORER"
        },
        "phone": {
          "type": "string",
          "description": "The phone of the actor",
          "example": "123456789"
        },
        "address": {
          "type": "string",
          "description": "The address of the actor",
          "example": "Calle sa 123"
        }
      }
    },
    "UpdateActor": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the actor",
          "example": "John Doe"
        },
        "surname": {
          "type": "string",
          "description": "The surname of the actor",
          "example": "Doe"
        },
        "email": {
          "type": "string",
          "format": "email",
          "description": "The email of the actor",
          "example": "jhon@mail.com"
        },
        "password": {
          "type": "string",
          "description": "The password of the actor, it must be at least 5 characters long, and it must be at least 5 characters long and must contain at least one uppercase letter, one lowercase letter, one number and one special character",
          "example": "Password123%"
        },
        "role": {
          "type": "string",
          "description": "The role of the actor, it must be ADMINISTRATOR, MANAGER, EXPLORER or SPONSOR",
          "example": "EXPLORER"
        },
        "phone": {
          "type": "string",
          "description": "The phone of the actor",
          "example": "123456789"
        },
        "address": {
          "type": "string",
          "description": "The address of the actor",
          "example": "Calle sa 123"
        }
      }
    },
    "Trip": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "description": "The id of the trip",
          "example": "1"
        },
        "ticker": {
          "type": "string",
          "description": "The ticker of the trip",
          "example": "221201-ABCD"
        },
        "title": {
          "type": "string",
          "description": "The title of the trip",
          "example": "Trip to the moon"
        },
        "description": {
          "type": "string",
          "description": "The description of the trip",
          "example": "Trip to the moon"
        },
        "price": {
          "type": "number",
          "description": "The price of the trip",
          "example": "100"
        },
        "requirements": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The requirements of the trip",
          "example": [
            "Swimming",
            "Diving"
          ]
        },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "description": "The start moment of the trip",
          "example": "2020-12-12T12:12:12Z"
        },
        "endDate": {
          "type": "string",
          "format": "date-time",
          "description": "The end moment of the trip",
          "example": "2020-12-12T12:12:12Z"
        },
        "cancel": {
          "type": "boolean",
          "description": "The cancel of the trip",
          "example": "false"
        },
        "cancelReason": {
          "type": "string",
          "description": "The cancel reason of the trip",
          "example": "The trip is cancelled because..."
        },
        "pictures": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The pictures of the trip",
          "example": [
            "https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png",
            "https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png"
          ]
        },
        "stages": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "title": {
                "type": "string",
                "description": "The title of the stage",
                "example": "Stage 1"
              },
              "description": {
                "type": "string",
                "description": "The description of the stage",
                "example": "Stage 1 description"
              },
              "price": {
                "type": "number",
                "description": "The price of the stage",
                "example": "100"
              }
            }
          },
          "description": "The stages of the trip",
          "example": [
            {
              "title": "Stage 1",
              "description": "Stage 1 description",
              "price": "100"
            },
            {
              "title": "Stage 2",
              "description": "Stage 2 description",
              "price": "200"
            }
          ]
        },
        "manager": {
          "type": "string",
          "description": "The manager of the trip",
          "example": "5f9f1c9b9b9b9b9b9b9b9b9b"
        },
        "published": {
          "type": "boolean",
          "description": "The published of the trip",
          "example": "false"
        }
      }
    },
    "CreateTrip": {
      "type": "object",
      "required": [
        "title",
        "description",
        "requirements",
        "startDate",
        "endDate",
        "stages",
        "manager"
      ],
      "properties": {
        "title": {
          "type": "string",
          "description": "The title of the trip",
          "example": "Trip to the moon"
        },
        "description": {
          "type": "string",
          "description": "The description of the trip",
          "example": "Trip to the moon"
        },
        "requirements": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The requirements of the trip",
          "example": [
            "Swimming",
            "Diving"
          ]
        },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "description": "The start moment of the trip",
          "example": "2020-12-12T12:12:12Z"
        },
        "endDate": {
          "type": "string",
          "format": "date-time",
          "description": "The end moment of the trip",
          "example": "2020-12-12T12:12:12Z"
        },
        "pictures": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The pictures of the trip",
          "example": [
            "https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png",
            "https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png"
          ]
        },
        "stages": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "title": {
                "type": "string",
                "description": "The title of the stage",
                "example": "Stage 1"
              },
              "description": {
                "type": "string",
                "description": "The description of the stage",
                "example": "Stage 1 description"
              },
              "price": {
                "type": "number",
                "description": "The price of the stage",
                "example": "100"
              }
            }
          },
          "description": "The stages of the trip",
          "example": [
            {
              "title": "Stage 1",
              "description": "Stage 1 description",
              "price": "100"
            },
            {
              "title": "Stage 2",
              "description": "Stage 2 description",
              "price": "200"
            }
          ]
        },
        "manager": {
          "type": "string",
          "description": "The manager of the trip",
          "example": "5f9f1c9b9b9b9b9b9b9b9b9b"
        }
      }
    },
    "UpdateTrip": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "description": "The title of the trip",
          "example": "Trip to the moon"
        },
        "description": {
          "type": "string",
          "description": "The description of the trip",
          "example": "Trip to the moon"
        },
        "requirements": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The requirements of the trip",
          "example": [
            "Swimming",
            "Diving"
          ]
        },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "description": "The start moment of the trip",
          "example": "2020-12-12T12:12:12Z"
        },
        "endDate": {
          "type": "string",
          "format": "date-time",
          "description": "The end moment of the trip",
          "example": "2020-12-12T12:12:12Z"
        },
        "pictures": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The pictures of the trip",
          "example": [
            "https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png",
            "https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png"
          ]
        },
        "stages": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "title": {
                "type": "string",
                "description": "The title of the stage",
                "example": "Stage 1"
              },
              "description": {
                "type": "string",
                "description": "The description of the stage",
                "example": "Stage 1 description"
              },
              "price": {
                "type": "number",
                "description": "The price of the stage",
                "example": "100"
              }
            }
          },
          "description": "The stages of the trip",
          "example": [
            {
              "title": "Stage 1",
              "description": "Stage 1 description",
              "price": "100"
            },
            {
              "title": "Stage 2",
              "description": "Stage 2 description",
              "price": "200"
            }
          ]
        },
        "manager": {
          "type": "string",
          "description": "The manager of the trip",
          "example": "5f9f1c9b9b9b9b9b9b9b9b9b"
        }
      }
    },
    "Sponsorship": {
      "type": "object",
      "properties": {
        "paid": {
          "type": "boolean",
          "description": "The sponsor has been paid",
          "example": false
        },
        "banner": {
          "type": "string",
          "description": "The banner of the sponsorship",
          "example": "https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png"
        },
        "landingPage": {
          "type": "string",
          "description": "The landing page",
          "example": "https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png"
        },
        "trip": {
          "type": "string",
          "description": "The trip",
          "example": "5f9f1c9b9b9b9b9b9b9b9b9b"
        },
        "sponsor": {
          "type": "string",
          "description": "The explorer of the trip",
          "example": "5f9f1c9b9b9b9b9b9b9b9b9b"
        }
      }
    },
    "CreateSponsorship": {
      "type": "object",
      "required": [
        "banner",
        "landingPage",
        "trip",
        "sponsor"
      ],
      "properties": {
        "banner": {
          "type": "string",
          "description": "The banner of the sponsorship",
          "example": "https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png"
        },
        "landingPage": {
          "type": "string",
          "description": "The landing page",
          "example": "https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png"
        },
        "trip": {
          "type": "string",
          "description": "The trip",
          "example": "5f9f1c9b9b9b9b9b9b9b9b9b"
        },
        "sponsor": {
          "type": "string",
          "description": "The explorer of the trip",
          "example": "5f9f1c9b9b9b9b9b9b9b9b9b"
        }
      }
    },
    "UpdateSponsorship": {
      "type": "object",
      "properties": {
        "banner": {
          "type": "string",
          "description": "The banner of the sponsorship",
          "example": "https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png"
        },
        "landingPage": {
          "type": "string",
          "description": "The landing page",
          "example": "https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png"
        },
        "trip": {
          "type": "string",
          "description": "The trip",
          "example": "5f9f1c9b9b9b9b9b9b9b9b9b"
        },
        "sponsor": {
          "type": "string",
          "description": "The explorer of the trip",
          "example": "5f9f1c9b9b9b9b9b9b9b9b9b"
        }
      }
    },
    "Configuration": {
      "type": "object",
      "properties": {
        "flatRate": {
          "type": "number",
          "format": "number",
          "description": "The configurated flat rate for sponsorships",
          "example": 200
        }
      }
    },
    "Booking": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "description": "The id of the booking",
          "example": "5f9f1c9b9b9b9b9b9b9b9b9b"
        },
        "moment": {
          "type": "string",
          "format": "date-time",
          "description": "The ticker of the trip",
          "example": "2020-12-12T12:12:12Z"
        },
        "status": {
          "type": "string",
          "description": "The status of the booking, it must be PENDING, REJECTED, DUE, ACCEPTED, CANCELLED",
          "example": "PENDING"
        },
        "comment": {
          "type": "string",
          "description": "The comment for the booking",
          "example": "Trip to the moon"
        },
        "trip": {
          "type": "string",
          "description": "The trip",
          "example": "5f9f1c9b9b9b9b9b9b9b9b9b"
        },
        "explorer": {
          "type": "string",
          "description": "The explorer of the trip",
          "example": "5f9f1c9b9b9b9b9b9b9b9b9b"
        },
        "rejectReason": {
          "type": "string",
          "description": "The reason for the rejection",
          "example": "The explorer is not a good person"
        }
      }
    },
    "CreateBooking": {
      "type": "object",
      "required": [
        "trip",
        "explorer"
      ],
      "properties": {
        "comment": {
          "type": "string",
          "description": "The comment for the booking",
          "example": "Trip to the moon"
        },
        "trip": {
          "type": "string",
          "description": "The trip",
          "example": "5f9f1c9b9b9b9b9b9b9b9b9b"
        },
        "explorer": {
          "type": "string",
          "description": "The explorer of the trip",
          "example": "5f9f1c9b9b9b9b9b9b9b9b9b"
        }
      }
    },
    "Datawarehouse": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string"
        },
        "tripsPerManagerStats": {
          "type": "object"
        },
        "applicationsPerTripStats": {
          "type": "object"
        },
        "tripPriceStats": {
          "type": "object"
        },
        "statusRatios": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "computationMoment": {
          "type": "string"
        },
        "__v": {
          "type": "number"
        }
      }
    }
  }
}